/*
 * matrix_multiplication_component.hpp
 *
 *  Created on: Sep 5, 2016
 *      Author: pfandedd
 */

#pragma once

#include <cinttypes>
#include <hpx/include/components.hpp>
#include <hpx/include/iostreams.hpp>

#include "matrix_multiplication_kernel.hpp"

extern uint64_t small_block_size;
extern uint64_t verbose;

struct matrixMultiply_server: hpx::components::component_base<
		matrixMultiply_server> {

	size_t N;
	std::vector<double> A;
	std::vector<double> B;

	// TODO: why does this get called?
	matrixMultiply_server() :
			N(0) {
	}

	matrixMultiply_server(size_t N, std::vector<double> A,
			std::vector<double> B) :
			N(N), A(A), B(B) {
	}

	std::vector<double> matrixMultiply(std::uint64_t x, std::uint64_t y,
			size_t blockSize);

	HPX_DEFINE_COMPONENT_ACTION(matrixMultiply_server, matrixMultiply,
			matrixMultiply_action);

};

HPX_REGISTER_ACTION_DECLARATION(matrixMultiply_server::matrixMultiply_action);

// use autogenerated -> remove, then use async
struct matrixMultiply_client: hpx::components::client_base<
		matrixMultiply_client, matrixMultiply_server> {

	using base_type = hpx::components::client_base<
	matrixMultiply_client, matrixMultiply_server>;

	matrixMultiply_client(hpx::future<hpx::id_type> && id) :
			base_type(std::move(id)) {
	}

	hpx::future<std::vector<double>> matrixMultiplyClient(std::uint64_t x,
			std::uint64_t y, size_t blockSize) {
		return hpx::async<matrixMultiply_server::matrixMultiply_action>(
				get_id(), x, y, blockSize);
	}
};

